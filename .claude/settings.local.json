{
  "permissions": {
    "allow": [
      "Bash(docker-compose ps:*)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" ps)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" run --rm --name temp-db-check --network ai-radar_backplane -e PGPASSWORD=ai_pwd postgres:13 psql -h ai-radar-db-1 -U ai -d ai_radar -c \"SELECT COUNT(*) as source_count FROM ai_radar.sources WHERE active = true;\")",
      "Bash(python:*)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose --profile dev down)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose --profile dev up -d)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose up -d db nats minio api)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose up -d fetcher scheduler)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose logs api --tail 20)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose up -d ui-dev)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose logs fetcher --tail 10)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose up -d --build fetcher)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose up -d scheduler)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" compose logs scheduler --tail 10)",
      "Bash(pip install:*)",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" exec ai-radar-db-1 psql -U ai -d ai_radar -c \"CREATE SCHEMA IF NOT EXISTS ai_radar;\")",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" exec ai-radar-db-1 psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.sources (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    source_type TEXT NOT NULL DEFAULT 'rss',\n    active BOOLEAN NOT NULL DEFAULT true,\n    last_fetched_at TIMESTAMP WITH TIME ZONE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" exec ai-radar-db-1 psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.articles (\n    id SERIAL PRIMARY KEY,\n    source_id INTEGER REFERENCES ai_radar.sources(id),\n    title TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    author TEXT,\n    published_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    content TEXT,\n    summary TEXT,\n    importance_score FLOAT DEFAULT 0.5,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(\"/mnt/c/Program Files/Docker/Docker/resources/bin/docker\" exec ai-radar-db-1 psql -U ai -d ai_radar -c \"\nINSERT INTO ai_radar.sources (name, url, source_type, active) \nVALUES \n    ('TechCrunch', 'https://techcrunch.com/feed/', 'rss', true),\n    ('Wired', 'https://www.wired.com/feed/rss', 'rss', true),\n    ('MIT Technology Review', 'https://www.technologyreview.com/feed/', 'rss', true),\n    ('VentureBeat', 'https://venturebeat.com/feed/', 'rss', true)\nON CONFLICT (url) DO NOTHING;\")",
      "Bash(./ai-radar.sh:*)",
      "Bash(docker compose:*)",
      "Bash(grep:*)",
      "Bash(curl:*)",
      "Bash(docker volume prune:*)",
      "Bash(# Test the database initialization steps\n\n# Enable vector extension\necho \"Enabling vector extension...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"CREATE EXTENSION IF NOT EXISTS vector;\"\n\n# Create schema\necho \"Creating schema...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"CREATE SCHEMA IF NOT EXISTS ai_radar;\"\n\n# Create sources table\necho \"Creating sources table...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.sources (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    source_type TEXT NOT NULL DEFAULT 'rss',\n    active BOOLEAN NOT NULL DEFAULT true,\n    last_fetched_at TIMESTAMP WITH TIME ZONE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\"\n\n# Create articles table with embedding\necho \"Creating articles table with embedding...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.articles (\n    id SERIAL PRIMARY KEY,\n    source_id INTEGER REFERENCES ai_radar.sources(id),\n    title TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    author TEXT,\n    published_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    content TEXT,\n    summary TEXT,\n    embedding vector(1536),\n    importance_score FLOAT DEFAULT 0.5,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\"\n\n# Insert sample sources\necho \"Adding sample sources...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nINSERT INTO ai_radar.sources (name, url, source_type, active) \nVALUES \n    ('TechCrunch AI', 'https://techcrunch.com/category/artificial-intelligence/feed/', 'rss', true),\n    ('Wired AI', 'https://www.wired.com/feed/tag/artificial-intelligence/latest/rss', 'rss', true),\n    ('MIT Technology Review', 'https://www.technologyreview.com/feed/', 'rss', true),\n    ('VentureBeat AI', 'https://venturebeat.com/ai/feed/', 'rss', true),\n    ('The Verge AI', 'https://www.theverge.com/ai-artificial-intelligence/rss/index.xml', 'rss', true)\nON CONFLICT (url) DO NOTHING;\"\n\n# Verify schema\necho \"Verifying schema...\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"SELECT column_name FROM information_schema.columns WHERE table_schema = 'ai_radar' AND table_name = 'articles' AND column_name = 'embedding';\")",
      "Bash(# Simulate ai-radar.ps1 up command\n\necho \"=== Starting AI Radar Services ===\"\n\necho \"1. Starting infrastructure services...\"\ndocker compose --profile dev up -d db nats minio\n\necho \"2. Waiting for infrastructure to be healthy...\"\nsleep 15\n\necho \"3. Starting setup services...\"\ndocker compose --profile dev up -d toolhub\n\necho \"4. Initializing database with vector extension and embedding column...\"\n# This matches the enhanced Initialize-Database function\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"CREATE EXTENSION IF NOT EXISTS vector;\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"CREATE SCHEMA IF NOT EXISTS ai_radar;\"\n\n# Create sources table\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.sources (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    source_type TEXT NOT NULL DEFAULT 'rss',\n    active BOOLEAN NOT NULL DEFAULT true,\n    last_fetched_at TIMESTAMP WITH TIME ZONE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\"\n\n# Create articles table with embedding\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nCREATE TABLE IF NOT EXISTS ai_radar.articles (\n    id SERIAL PRIMARY KEY,\n    source_id INTEGER REFERENCES ai_radar.sources(id),\n    title TEXT NOT NULL,\n    url TEXT NOT NULL UNIQUE,\n    author TEXT,\n    published_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    content TEXT,\n    summary TEXT,\n    embedding vector(1536),\n    importance_score FLOAT DEFAULT 0.5,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\"\n\n# Insert sample RSS sources\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"\nINSERT INTO ai_radar.sources (name, url, source_type, active) \nVALUES \n    ('TechCrunch AI', 'https://techcrunch.com/category/artificial-intelligence/feed/', 'rss', true),\n    ('Wired AI', 'https://www.wired.com/feed/tag/artificial-intelligence/latest/rss', 'rss', true),\n    ('MIT Technology Review', 'https://www.technologyreview.com/feed/', 'rss', true),\n    ('VentureBeat AI', 'https://venturebeat.com/ai/feed/', 'rss', true),\n    ('The Verge AI', 'https://www.theverge.com/ai-artificial-intelligence/rss/index.xml', 'rss', true)\nON CONFLICT (url) DO NOTHING;\"\n\necho \"5. Verifying database schema...\"\nresult=$(docker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"SELECT column_name FROM information_schema.columns WHERE table_schema = 'ai_radar' AND table_name = 'articles' AND column_name = 'embedding';\")\nif [[ $result == *\"embedding\"* ]]; then\n    echo \"✅ Database schema verified (embedding column exists)\"\nelse\n    echo \"⚠️  Warning: embedding column not found\"\nfi\n\necho \"6. Starting application services...\"\ndocker compose --profile dev up -d api\n\necho \"7. Starting AI agent services...\"\ndocker compose --profile dev up -d fetcher scheduler summariser ranker\n\necho \"8. Starting UI services...\"\ndocker compose --profile dev up -d ui-dev\n\necho \"9. Waiting for agents to fully start...\"\nsleep 10\n\necho \"10. Triggering initial RSS feed fetch (Start-InitialFeedFetch equivalent)...\")",
      "Bash(# Continue simulating Start-InitialFeedFetch function\n\necho \"=== Triggering Initial RSS Feed Fetch ===\"\n\n# Wait for services to be fully ready (matches the 15s wait in ps1)\necho \"Waiting for services to initialize...\"\nsleep 15\n\n# Method 1: Try the Python trigger script\necho \"Method 1: Running trigger_feed.py...\"\nif [ -f \"./trigger_feed.py\" ]; then\n    python ./trigger_feed.py\n    echo \"Python trigger script completed!\"\nelse\n    echo \"trigger_feed.py not found\"\nfi\n\necho \"\"\necho \"Method 2: Restarting scheduler to trigger immediate RSS fetch...\"\ndocker compose --profile dev restart scheduler\nsleep 5\necho \"Scheduler restarted - RSS feeds should start fetching automatically!\"\n\necho \"\"\necho \"Method 3: Running simple RSS fetcher as backup...\"\nif [ -f \"./simple_fetcher.py\" ]; then\n    python ./simple_fetcher.py\n    echo \"Simple fetcher completed!\"\nelse\n    echo \"simple_fetcher.py not found\"\nfi\n\necho \"\"\necho \"Giving system time to process feeds...\"\nsleep 10\n\necho \"\"\necho \"Checking if articles are being created...\")",
      "Bash(# Final verification matching the ps1 script logic\n\necho \"✅ Articles found in database!\"\narticlesCount=$(docker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"SELECT COUNT(*) FROM ai_radar.articles;\" 2>&1)\necho \"Total articles: $articlesCount\"\n\necho \"\"\necho \"Checking AI-generated importance scores...\"\nscoreStats=$(docker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"SELECT COUNT(*) as ai_scored FROM ai_radar.articles WHERE importance_score != 0.5;\" 2>&1)\necho \"Articles with AI scores: $scoreStats\"\n\necho \"\"\necho \"Top AI-scored articles:\"\ndocker compose --profile dev exec -T db psql -U ai -d ai_radar -c \"SELECT title, importance_score FROM ai_radar.articles WHERE importance_score != 0.5 ORDER BY importance_score DESC LIMIT 3;\"\n\necho \"\"\necho \"=== AUTOMATIC FETCHING TEST COMPLETE ===\"\necho \"✅ System started from complete reset\"\necho \"✅ Database schema properly initialized with vector extension\" \necho \"✅ RSS feeds automatically triggered\"\necho \"✅ Articles fetched, summarized, and AI-scored\")",
      "Bash(rm:*)",
      "Bash(docker cp:*)"
    ],
    "deny": []
  }
}