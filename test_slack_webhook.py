#!/usr/bin/env python
"""
Test Slack webhook integration directly
"""
import asyncio
import sys
import json
import httpx

# Add the project paths to sys.path to import the modules
sys.path.append('/app')
sys.path.append('/app/_core')
sys.path.append('/app/agents/_core')

from _core.secrets import SecretsManager
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("test-slack-webhook")

async def test_slack_webhook():
    """Test sending a Slack webhook notification"""
    
    print("🔔 Testing Slack Webhook Integration")
    print("=" * 50)
    
    # Initialize secrets manager
    secrets_manager = SecretsManager(logger)
    
    # Get Slack webhook URL
    slack_webhook_url = secrets_manager.get_secret("SLACK_KEY")
    
    if not slack_webhook_url:
        print("❌ No Slack webhook URL found!")
        return
        
    print(f"✅ Retrieved Slack webhook URL: {slack_webhook_url[:30]}...")
    
    # Create test message payload
    test_article = {
        "title": "TEST: Meta taps Scale AI's Alexandr Wang to join new 'superintelligence' lab",
        "summary": "Meta has reportedly recruited Scale AI CEO Alexandr Wang to join its new artificial general intelligence (AGI) research lab, marking a significant expansion of the social media giant's AI ambitions and cementing its commitment to developing superintelligent systems.",
        "score": 0.95,
        "url": "https://techcrunch.com/2025/06/10/meta-scale-ai-superintelligence-lab/"
    }
    
    message = {
        "blocks": [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "🔥 High-Importance AI News Alert (TEST)"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*{test_article['title']}*\n\n{test_article['summary'][:300]}{'...' if len(test_article['summary']) > 300 else ''}"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Importance Score:*\n{test_article['score']:.2f}"
                    },
                    {
                        "type": "mrkdwn", 
                        "text": f"*Article URL:*\n<{test_article['url']}|Read More>"
                    }
                ]
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"Generated by AI Radar • Score threshold: 0.8+ • TEST MESSAGE"
                    }
                ]
            }
        ]
    }
    
    # Send to Slack
    try:
        print(f"📤 Sending test message to Slack...")
        async with httpx.AsyncClient() as client:
            response = await client.post(
                slack_webhook_url, 
                json=message,
                timeout=10.0
            )
            response.raise_for_status()
            print(f"✅ SUCCESS: Slack webhook test message sent!")
            print(f"📊 Response status: {response.status_code}")
            print(f"📝 Response text: {response.text}")
            return True
            
    except Exception as e:
        print(f"❌ ERROR: Failed to send Slack webhook: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_slack_webhook())
    if result:
        print(f"\n🎯 RESULT: Slack webhook integration working perfectly!")
    else:
        print(f"\n🚫 RESULT: Slack webhook integration has issues")